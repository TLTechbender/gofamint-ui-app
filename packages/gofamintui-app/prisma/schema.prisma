

// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id          String        @id @default(uuid())
//   email       String        @unique
//   userName    String        @unique
//   firstName   String
//   lastName    String
//   phoneNumber String?       @unique // Google auth wahala 
//   password    String?       // For google auth wahala with no password
//   bio         String?
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   isVerified  Boolean       @default(false)
  
//   // Author elevation (controlled from Sanity)
//   isAuthor    Boolean       @default(false)
//   author      Author?       // One-to-one relationship
  
//   // User interactions
//   comments     Comment[]
//   commentLikes CommentLike[]
//   blogReads    BlogRead[]
//   blogLikes    BlogLike[]
  
//   @@map("users")
// }
// //Nha references I need pass for here
// model Author {
//   id          String   @id @default(uuid())
//   userId      String   @unique


//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
  
//   // Relationships
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   socials     Social[]
//   blogs       Blog[]   // Author can have many blogs
  
//   @@map("authors")
// }

// model Social {
//   id        String @id @default(uuid())
//   authorId  String
//   platform  String  // "facebook", "twitter", "instagram", etc
//   url       String
//   handle    String?
  
//   author    Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
//   @@unique([authorId, platform])
//   @@map("socials")
// }

// model Blog {
//   id              String    @id @default(uuid())
//   sanityId        String    @unique  // The _id from Sanity
//   sanitySlug      String    @unique  // The slug from Sanity
//   authorId        String    // Links to your Author model
  
//   // CRITICAL: Publication control fields
//   isPublishedInSanity Boolean @default(false)  // Synced from Sanity's published state
//   publishedAt         DateTime?               // When it was published in Sanity
//   sanityUpdatedAt     DateTime?               // Last update time from Sanity
  
//   // Analytics tracking
//   genericViewCount    Int      @default(0)    // Total viewport views
  
//   // Local tracking
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
//   lastSyncedAt    DateTime @default(now())    // When we last synced with Sanity
  
//   // Relationships
//   author          Author   @relation(fields: [authorId], references: [id])
//   likes           BlogLike[]
//   reads           BlogRead[]
//   comments        Comment[]
  
//   @@index([sanityId])
//   @@index([sanitySlug])
//   @@index([authorId])
//   @@index([isPublishedInSanity])
//   @@map("blogs")
// }
// model Comment {
//   id           String       @id @default(uuid())
//   content      String
//   blogId       String       // References local Blog
//   userId       String
//   parentId     String?      // For nested replies
//   createdAt    DateTime     @default(now())
//   updatedAt    DateTime     @updatedAt
//   isApproved   Boolean      @default(false)  // Comment moderation
  
//   // Relationships
//   blog         Blog         @relation(fields: [blogId], references: [id], onDelete: Cascade)
//   user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
//   parent       Comment?     @relation("CommentReplies", fields: [parentId], references: [id])
//   replies      Comment[]    @relation("CommentReplies")
//   likes        CommentLike[]
  
//   @@index([blogId])
//   @@index([userId])
//   @@map("comments")
// }

// model CommentLike {
//   id        String   @id @default(uuid())
//   userId    String
//   commentId String
//   createdAt DateTime @default(now())
  
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
//   @@unique([userId, commentId])
//   @@map("comment_likes")
// }

// model BlogLike {
//   id        String   @id @default(uuid())
//   userId    String
//   blogId    String   // References local Blog
//   createdAt DateTime @default(now())
  
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
//   @@unique([userId, blogId])
//   @@index([blogId])
//   @@map("blog_likes")
// }

// model BlogRead {
//   id        String   @id @default(uuid())
//   userId    String
//   blogId    String   // References local Blog
//   readAt    DateTime @default(now())
  
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
//   @@unique([userId, blogId])
//   @@index([blogId])
//   @@map("blog_reads")
// }
// This is your complete updated Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  userName    String        @unique
  firstName   String
  lastName    String
  phoneNumber String?       @unique // Google auth wahala 
  password    String?       // For google auth wahala with no password
  bio         String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isVerified  Boolean       @default(false)
  
  // Author elevation (controlled from Sanity)
  isAuthor    Boolean       @default(false)
  author      Author?       // One-to-one relationship
  
  // User interactions
  comments     Comment[]
  commentLikes CommentLike[]
  blogReads    BlogRead[]
  blogLikes    BlogLike[]
  
  @@map("users")
}

// Author model with proper cascade handling
model Author {
  id          String   @id @default(uuid())
  userId      String   @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  socials     Social[]
  blogs       Blog[]   // Author can have many blogs
  
  @@map("authors")
}

model Social {
  id        String @id @default(uuid())
  authorId  String
  platform  String  // "facebook", "twitter", "instagram", etc
  url       String
  handle    String?
  
  author    Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@unique([authorId, platform])
  @@map("socials")
}

// UPDATED: Blog model with optional author reference
model Blog {
  id              String    @id @default(uuid())
  sanityId        String    @unique  // The _id from Sanity
  sanitySlug      String    @unique  // The slug from Sanity
  authorId        String?   // NOW OPTIONAL - can be null when author is suspended/deleted
  
  // CRITICAL: Publication control fields
  isPublishedInSanity Boolean @default(false)  // Synced from Sanity's published state
  publishedAt         DateTime?               // When it was published in Sanity
  sanityUpdatedAt     DateTime?               // Last update time from Sanity
  
  // Analytics tracking
  genericViewCount    Int      @default(0)    // Total viewport views
  
  // Local tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastSyncedAt    DateTime @default(now())    // When we last synced with Sanity
  
  // Relationships - NOW OPTIONAL with SetNull on delete
  author          Author?  @relation(fields: [authorId], references: [id], onDelete: SetNull)
  likes           BlogLike[]
  reads           BlogRead[]
  comments        Comment[]
  
  @@index([sanityId])
  @@index([sanitySlug])
  @@index([authorId])
  @@index([isPublishedInSanity])
  @@map("blogs")
}

model Comment {
  id           String       @id @default(uuid())
  content      String
  blogId       String       // References local Blog
  userId       String
  parentId     String?      // For nested replies
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
 // Comment moderation
  
  // Relationships
  blog         Blog         @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent       Comment?     @relation("CommentReplies", fields: [parentId], references: [id])
  replies      Comment[]    @relation("CommentReplies")
  likes        CommentLike[]
  
  @@index([blogId])
  @@index([userId])
  @@map("comments")
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
  @@map("comment_likes")
}

model BlogLike {
  id        String   @id @default(uuid())
  userId    String
  blogId    String   // References local Blog
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
  @@unique([userId, blogId])
  @@index([blogId])
  @@map("blog_likes")
}

model BlogRead {
  id        String   @id @default(uuid())
  userId    String
  blogId    String   // References local Blog
  readAt    DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
  @@unique([userId, blogId])
  @@index([blogId])
  @@map("blog_reads")
}